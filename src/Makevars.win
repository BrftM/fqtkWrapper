TARGET = $(subst 64,x86_64,$(subst 32,i686,$(WIN)))-pc-windows-gnu

TARGET_DIR = ./rfqtk/target
LIBDIR = $(TARGET_DIR)/$(TARGET)/release
STATLIB = $(LIBDIR)/librfqtk.a
PKG_LIBS = -L$(LIBDIR) -lrfqtk -lws2_32 -ladvapi32 -luserenv -lbcrypt -lntdll

all: $(SHLIB) rust_clean

.PHONY: $(STATLIB)

$(SHLIB): $(STATLIB)

CARGOTMP = $(CURDIR)/.cargo
VENDOR_DIR = vendor

$(STATLIB):
	mkdir -p $(TARGET_DIR)/libgcc_mock
	touch $(TARGET_DIR)/libgcc_mock/libgcc_eh.a

	if [ -f ./rfqtk/vendor.tar.xz ]; then \
		tar xf rfqtk/vendor.tar.xz && \
		mkdir -p $(CARGOTMP) && \
		cp rfqtk/vendor-config.toml $(CARGOTMP)/config.toml; \
	fi

	export CARGO_HOME=$(CARGOTMP) && \
	export LIBRARY_PATH="$(LIBRARY_PATH);$(CURDIR)/$(TARGET_DIR)/libgcc_mock" && \
	RUSTFLAGS="$(RUSTFLAGS) --print=native-static-libs" cargo build -j 2 --offline --target=$(TARGET) --lib --release --manifest-path=rfqtk/Cargo.toml --target-dir=$(TARGET_DIR)

	# Always clean up CARGOTMP
	rm -Rf $(CARGOTMP);

rust_clean: $(SHLIB)
	rm -Rf $(CARGOTMP) $(VENDOR_DIR) $(TARGET_DIR)

clean:
	rm -Rf $(SHLIB) $(STATLIB) $(OBJECTS) $(TARGET_DIR) $(VENDOR_DIR)
